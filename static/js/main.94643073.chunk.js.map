{"version":3,"sources":["logo.svg","Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Person","props","React","useState","one","console","log","name","age","App","state","person","className","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"wJAAAA,EAAOC,QAAU,IAA0B,kC,mJCoD5BC,EA/CA,SAACC,GAAW,IAAD,EAEDC,IAAMC,SAAS,GAFd,mBAEfC,EAFe,UAItB,OADAC,QAAQC,IAAIJ,IAAMC,SAAS,IAGvB,6BACI,+EAAqDC,GACrD,yCAAeH,EAAMM,KAArB,aAAqCN,EAAMO,OCkCxCC,E,4MApBbC,MAAQ,CACLC,OAAS,CACP,CAACJ,KAAO,OAASC,IAAM,IACvB,CAACD,KAAO,QAAUC,IAAM,IACxB,CAACD,KAAO,QAAUC,IAAM,M,uDAI3B,OACE,yBAAKI,UAAU,OACb,kDACA,kBAAC,EAAD,CAAQL,KAAMM,KAAKH,MAAMC,OAAO,GAAGJ,KAAMC,IAAKK,KAAKH,MAAMC,OAAO,GAAGH,MACnE,kBAAC,EAAD,CAAQD,KAAMM,KAAKH,MAAMC,OAAO,GAAGJ,KAAMC,IAAKK,KAAKH,MAAMC,OAAO,GAAGH,MACnE,kBAAC,EAAD,CAAQD,KAAMM,KAAKH,MAAMC,OAAO,GAAGJ,KAAMC,IAAKK,KAAKH,MAAMC,OAAO,GAAGH,W,GAdzDM,aCdEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,6BACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,W","file":"static/js/main.94643073.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\n//similar to the old fasion function, in this case we are assigning it to a constant\r\n\r\n\r\nconst Person = (props) => {\r\n\r\n    const [one,setTwo] = React.useState(1);\r\n    console.log(React.useState(1));\r\n    return(\r\n        \r\n        <div>\r\n            <p>calling the person component using function base {one}</p>\r\n            <p>Hello from {props.name} and I am {props.age}</p>\r\n            {/* {props.children} */}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// function person(props){\r\n    \r\n//     const [one,setOwo] = React.useState(1);\r\n\r\n//     function increase(){\r\n//         setOwo(one +1);\r\n//     }\r\n//     return(\r\n        \r\n//         <div>\r\n//             <p>calling the person component using function base {one}</p>\r\n//             <p>Hello from {props.name} and I am {Math.floor(Math.random() * 30)}</p>\r\n//             {props.children}\r\n//         </div>\r\n//     );\r\n    \r\n// }\r\n\r\n\r\n//When using class based component\r\n// class Person extends React.Component {\r\n//     render(){\r\n//         return(\r\n//             <p>My Name is {this.props.name}</p>\r\n//         );\r\n//     }\r\n// } \r\n\r\n///kailangan capital\r\n\r\n\r\n\r\nexport default Person;\r\n\r\n//bakuna outfit","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Person from \"./Person/Person\";\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nclass App extends Component {\n  state = {\n     person : [\n       {name : \"Ivan\" , age : 24},\n       {name : \"Donya\" , age : 29},\n       {name : \"Mavis\" , age : 24},\n     ]\n  }\n  render(){\n    return(\n      <div className=\"App\">\n        <h1>Ivan Christan Jay </h1>\n        <Person name={this.state.person[0].name} age={this.state.person[0].age}/>\n        <Person name={this.state.person[1].name} age={this.state.person[1].age} />\n        <Person name={this.state.person[2].name} age={this.state.person[2].age} />\n\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}